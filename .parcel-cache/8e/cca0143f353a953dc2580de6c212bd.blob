"use strict";

var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");

var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = void 0;

  var _react = _interopRequireWildcard(require("react"));

  var _useEventListener = require("./hooks/useEventListener");

  var _IsDevice = _interopRequireDefault(require("./helpers/IsDevice.js"));

  var _s2 = $RefreshSig$();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  /**
   * Cursor Core
   * Replaces the native cursor with a custom animated cursor, consisting
   * of an inner and outer dot that scale inversely based on hover or click.
   *
   * @author Stephen Scaff (github.com/stephenscaff)
   *
   * @param {string} color - rgb color value
   * @param {number} outerAlpha - level of alpha transparency for color
   * @param {number} innerSize - inner cursor size in px
   * @param {number} innerScale - inner cursor scale amount
   * @param {number} outerSize - outer cursor size in px
   * @param {number} outerScale - outer cursor scale amount
   *
   */
  function CursorCore(_ref) {
    _s2();

    var _ref$color = _ref.color,
        color = _ref$color === void 0 ? '220, 90, 90' : _ref$color,
        _ref$outerAlpha = _ref.outerAlpha,
        outerAlpha = _ref$outerAlpha === void 0 ? 0.3 : _ref$outerAlpha,
        _ref$innerSize = _ref.innerSize,
        innerSize = _ref$innerSize === void 0 ? 8 : _ref$innerSize,
        _ref$innerScale = _ref.innerScale,
        innerScale = _ref$innerScale === void 0 ? 0.7 : _ref$innerScale,
        _ref$outerSize = _ref.outerSize,
        outerSize = _ref$outerSize === void 0 ? 8 : _ref$outerSize,
        _ref$outerScale = _ref.outerScale,
        outerScale = _ref$outerScale === void 0 ? 5 : _ref$outerScale;
    var cursorOuterRef = (0, _react.useRef)();
    var cursorInnerRef = (0, _react.useRef)();
    var requestRef = (0, _react.useRef)();
    var previousTimeRef = (0, _react.useRef)();

    var _useState = (0, _react.useState)({
      x: 0,
      y: 0
    }),
        _useState2 = _slicedToArray(_useState, 2),
        coords = _useState2[0],
        setCoords = _useState2[1];

    var _useState3 = (0, _react.useState)(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isVisible = _useState4[0],
        setIsVisible = _useState4[1];

    var _useState5 = (0, _react.useState)(false),
        _useState6 = _slicedToArray(_useState5, 2),
        isActive = _useState6[0],
        setIsActive = _useState6[1];

    var _useState7 = (0, _react.useState)(false),
        _useState8 = _slicedToArray(_useState7, 2),
        isActiveClickable = _useState8[0],
        setIsActiveClickable = _useState8[1];

    var endX = (0, _react.useRef)(0);
    var endY = (0, _react.useRef)(0); // Primary Mouse Move event

    var onMouseMove = (0, _react.useCallback)(function (_ref2) {
      var clientX = _ref2.clientX,
          clientY = _ref2.clientY;
      setCoords({
        x: clientX,
        y: clientY
      });
      cursorInnerRef.current.style.top = clientY + 'px';
      cursorInnerRef.current.style.left = clientX + 'px';
      endX.current = clientX;
      endY.current = clientY;
    }, []); // Outer Cursor Animation Delay

    var animateOuterCursor = (0, _react.useCallback)(function (time) {
      if (previousTimeRef.current !== undefined) {
        coords.x += (endX.current - coords.x) / 8;
        coords.y += (endY.current - coords.y) / 8;
        cursorOuterRef.current.style.top = coords.y + 'px';
        cursorOuterRef.current.style.left = coords.x + 'px';
      }

      previousTimeRef.current = time;
      requestRef.current = requestAnimationFrame(animateOuterCursor);
    }, [requestRef] // eslint-disable-line
    ); // RAF for animateOuterCursor

    (0, _react.useEffect)(function () {
      requestRef.current = requestAnimationFrame(animateOuterCursor);
      return function () {
        cancelAnimationFrame(requestRef.current);
      };
    }, [animateOuterCursor]); // Mouse Events State updates

    var onMouseDown = (0, _react.useCallback)(function () {
      setIsActive(true);
      console.log(isVisible);
    }, []);
    var onMouseUp = (0, _react.useCallback)(function () {
      setIsActive(false);
      console.log(isVisible);
    }, []);
    var onMouseEnter = (0, _react.useCallback)(function () {
      setIsVisible(true);
      console.log(isVisible);
    }, []);
    var onMouseLeave = (0, _react.useCallback)(function () {
      setIsVisible(false);
      console.log(isVisible);
    }, []);
    (0, _useEventListener.useEventListener)('mousemove', onMouseMove, document);
    (0, _useEventListener.useEventListener)('mousedown', onMouseDown, document);
    (0, _useEventListener.useEventListener)('mouseup', onMouseUp, document);
    (0, _useEventListener.useEventListener)('mouseenter', onMouseEnter, document);
    (0, _useEventListener.useEventListener)('mouseleave', onMouseLeave, document); // Cursors Hover/Active State

    (0, _react.useEffect)(function () {
      if (isActive) {
        cursorInnerRef.current.style.transform = "translateZ(0) scale(".concat(innerScale, ")");
        cursorOuterRef.current.style.transform = "translateZ(0) scale(".concat(outerScale, ")");
      } else {
        cursorInnerRef.current.style.transform = 'translateZ(0) scale(1)';
        cursorOuterRef.current.style.transform = 'translateZ(0) scale(1)';
      }
    }, [innerScale, outerScale, isActive]); // Cursors Click States

    (0, _react.useEffect)(function () {
      if (isActiveClickable) {
        cursorInnerRef.current.style.transform = "translateZ(0) scale(".concat(innerScale * 1.3, ")");
        cursorOuterRef.current.style.transform = "translateZ(0) scale(".concat(outerScale * 1.4, ")");
      }
    }, [innerScale, outerScale, isActiveClickable]); // Cursor Visibility State

    (0, _react.useEffect)(function () {
      if (isVisible) {
        cursorInnerRef.current.style.opacity = 1;
        cursorOuterRef.current.style.opacity = 1;
      } else {
        cursorInnerRef.current.style.opacity = 1;
        cursorOuterRef.current.style.opacity = 1;
      }
    }, [isVisible]); // Target all possible clickables

    (0, _react.useEffect)(function () {
      var clickables = document.querySelectorAll('a, input[type="submit"], input[type="image"], label[for], select, button, .link');
      clickables.forEach(function (el) {
        el.style.cursor = 'none';
        el.addEventListener('mouseover', function () {
          setIsActive(true);
        });
        el.addEventListener('click', function () {
          setIsActive(true);
          setIsActiveClickable(false);
        });
        el.addEventListener('mousedown', function () {
          setIsActiveClickable(true);
        });
        el.addEventListener('mouseup', function () {
          setIsActive(true);
        });
        el.addEventListener('mouseout', function () {
          setIsActive(false);
          setIsActiveClickable(false);
        });
      });
      return function () {
        clickables.forEach(function (el) {
          el.removeEventListener('mouseover', function () {
            setIsActive(true);
          });
          el.removeEventListener('click', function () {
            setIsActive(true);
            setIsActiveClickable(false);
          });
          el.removeEventListener('mousedown', function () {
            setIsActiveClickable(true);
          });
          el.removeEventListener('mouseup', function () {
            setIsActive(true);
          });
          el.removeEventListener('mouseout', function () {
            setIsActive(false);
            setIsActiveClickable(false);
          });
        });
      };
    }, [isActive]); // Cursor Styles

    var styles = {
      cursorInner: {
        zIndex: 999,
        display: 'block',
        position: 'fixed',
        borderRadius: '50%',
        width: innerSize,
        height: innerSize,
        pointerEvents: 'none',
        backgroundColor: "rgba(".concat(color, ", 1)"),
        transition: 'opacity 0.15s ease-in-out, transform 0.25s ease-in-out',
        backfaceVisibility: 'hidden',
        willChange: 'transform'
      },
      cursorOuter: {
        zIndex: 999,
        display: 'block',
        position: 'fixed',
        borderRadius: '50%',
        pointerEvents: 'none',
        width: outerSize,
        height: outerSize,
        backgroundColor: "rgba(".concat(color, ", ").concat(outerAlpha, ")"),
        transition: 'opacity 0.15s ease-in-out, transform 0.15s ease-in-out',
        backfaceVisibility: 'hidden',
        willChange: 'transform'
      }
    }; // Hide / Show global cursor

    document.body.style.cursor = 'none';
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
      ref: cursorOuterRef,
      style: styles.cursorOuter
    }), /*#__PURE__*/_react["default"].createElement("div", {
      ref: cursorInnerRef,
      style: styles.cursorInner
    }));
  }
  /**
   * AnimatedCursor
   * Calls and passes props to CursorCore if not a touch/mobile device.
   */


  _s2(CursorCore, "ozYZdJkkHVssJE+uXIrk7sLllEY=", false, function () {
    return [_useEventListener.useEventListener, _useEventListener.useEventListener, _useEventListener.useEventListener, _useEventListener.useEventListener, _useEventListener.useEventListener];
  });

  _c = CursorCore;

  function AnimatedCursor(_ref3) {
    var _ref3$color = _ref3.color,
        color = _ref3$color === void 0 ? '220, 90, 90' : _ref3$color,
        _ref3$outerAlpha = _ref3.outerAlpha,
        outerAlpha = _ref3$outerAlpha === void 0 ? 0.3 : _ref3$outerAlpha,
        _ref3$innerSize = _ref3.innerSize,
        innerSize = _ref3$innerSize === void 0 ? 8 : _ref3$innerSize,
        _ref3$outerSize = _ref3.outerSize,
        outerSize = _ref3$outerSize === void 0 ? 8 : _ref3$outerSize,
        _ref3$outerScale = _ref3.outerScale,
        outerScale = _ref3$outerScale === void 0 ? 5 : _ref3$outerScale,
        _ref3$innerScale = _ref3.innerScale,
        innerScale = _ref3$innerScale === void 0 ? 0.7 : _ref3$innerScale;

    if (typeof navigator !== 'undefined' && _IsDevice["default"].any()) {
      return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null);
    }

    return /*#__PURE__*/_react["default"].createElement(CursorCore, {
      color: color,
      outerAlpha: outerAlpha,
      innerSize: innerSize,
      innerScale: innerScale,
      outerSize: outerSize,
      outerScale: outerScale
    });
  }

  _c2 = AnimatedCursor;
  var _default = AnimatedCursor;
  exports["default"] = _default;

  var _c, _c2;

  $RefreshReg$(_c, "CursorCore");
  $RefreshReg$(_c2, "AnimatedCursor");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}